package com.git.cs309.mmoclient.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

import javax.swing.JPanel;

import com.git.cs309.mmoserver.util.CycleQueue;

public final class ChatComponent extends JPanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = -7928431372008332240L;
	private static final Queue<ChatMessage> partyMessages = new CycleQueue<>(1000, true);
	private static final Queue<ChatMessage> globalMessages = new CycleQueue<>(1000, true);
	private static final Queue<ChatMessage> localMessages = new CycleQueue<>(1000, true);
	private static final Queue<ChatMessage> privateMessages = new CycleQueue<>(1000, true);
	private static final Color backgroundColor = new Color(0x7F, 0x7F, 0x7F, 0x7F);
	
	private ChatComponent() {
		setLayout(new BorderLayout());
	}

	public static void addMessage(final MessageGroup group, final String message) {
		switch (group) {
		case PARTY:
			partyMessages.add(new ChatMessage(group, message));
			break;
		case GLOBAL:
			globalMessages.add(new ChatMessage(group, message));
			break;
		case LOCAL:
			localMessages.add(new ChatMessage(group, message));
			break;
		case PRIVATE:
			privateMessages.add(new ChatMessage(group, message));
			break;
		default:
			System.err.println("No case for message group: " + group);
		}
	}
	
	@Override
	public void paint(Graphics g) {
		g.setColor(backgroundColor);
		g.fillRect(getX(), getY(), getWidth(), getHeight());
	}
}
